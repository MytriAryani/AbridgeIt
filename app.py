import streamlit as st
import os
from dotenv import load_dotenv
from google import genai
import smtplib
from email.message import EmailMessage


load_dotenv()

api_key=os.getenv("GOOGLE_API_KEY")

client = genai.Client(api_key=api_key)

def send_email(to_emails,subject,body,reply_to=None, name=None):
    email=os.getenv("SENDER_EMAIL")
    pwd=os.getenv("SENDER_PASSWORD")
    
    email_body=f"""
Hi,

This summary was sent by {name or "Anonymous"}.
{body}
    """
    
    msg=EmailMessage()
    msg.set_content(email_body)
    msg["Subject"]=subject
    msg["From"]=email
    msg["To"]=", ".join(to_emails)
    if reply_to:
        msg["Reply_To"]=reply_to
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com",465) as smtp:
            smtp.login(email,pwd)
            smtp.send_message(msg)
        return True
    except Exception as e:
        st.error(f"Failed to send email:{e}")
        return False
    

st.title("AbridgeIt!")
st.subheader("ðŸ“Œ Never lose track of meeting outcomes again.")
st.write("AbridgeIt is a smart, autonomous AI meeting assistant that transforms raw meeting transcripts into clear, professional summaries and actionable task lists. Designed for team leads and professionals, it ensures accountability by enabling easy email sharing â€” so everyone stays aligned on what needs to be done.")

if "summary" not in st.session_state:
    st.session_state["summary"] = ""

transcript = st.text_area("paste your meeting transcript here",height=70)
file=st.file_uploader("Or upload a transcript file",type=["txt"])

if file is not None:
    transcript=file.read().decode("utf-8")


def gen_summury(transcript):
    """
    this generates summary using gemini model
    """
    prompt = f"""
You are a professional meeting assistant. Given the following meeting transcript, generate a clean and easy-to-read plain-text summary and list of action items.

Format your output like this:

MEETING SUMMARY
- Point 1
- Point 2
- ...

ACTION ITEMS
- [Assignee name]: <task description>
    - Deadline: <date or 'Not mentioned'>
    - Priority: <priority if mentioned>
    - Notes: <optional context or additional notes>

(Repeat for each action item. Use sub-points for deadline, priority, and notes.)

Do not use Markdown or HTML. Return clean, white plain-text.

Transcript:
{transcript}
"""
    try:
        response=client.models.generate_content(
            model="gemini-2.0-flash", contents=prompt
        )
        return response.text
    except Exception as e:
        st.error(f"Failed to generate summary: {e}")
        return ""

def eval_summary(summary):
    """
    evaluates generated summary 
    return PASS or improvement needed
    """
    eval_prompt = f"""
You are a critical reviewer AI. You will assess a meeting summary generated by another AI.
Carefully review the content below and check:

- Does it include both "MEETING SUMMARY" and "ACTION ITEMS" sections?
- Are there at least 2-3 summary points and action items?
- Do action items contain: task, assignee, deadline, priority, and notes?
- Is the formatting clean plain text (no Markdown or weird characters)?
- Is the language clear and professional?

Reply with:
- "PASS" if the summary is excellent and usable as-is.
- OR give a reason for failure (e.g., "Missing ACTION ITEMS", "Too vague", "No assignee names", etc.).

Summary to evaluate:
{summary}
    """
    try:
        response=client.models.generate_content(
            model="gemini-2.0-flash", contents=eval_prompt
        )
        feedback=response.text.strip()
        return feedback
    except Exception as e:
        st.error(f"Failed to evaluate summary: {e}")
        return "EVALUATION ERROR"

def agent_loop(transcript, max_count=3):
    """
    this function evaluates the summary until best output is obtained
    """
    count=1
    while count<=max_count:
        
        summary=gen_summury(transcript)
        
        feedback=eval_summary(summary)
        
        if feedback=="PASS":
            st.success("Best summary obtained")
            return summary
        else:
            count+=1
    return summary


if st.button("Summurise with AI Agent"):
    if transcript.strip()=="":
        st.error("Please provide a transcript or upload a file.")
    else:
        with st.spinner("AI Agent is summarizing and evaluating..."):
            try:
                final_summary=agent_loop(transcript)
                st.session_state["summary"] = final_summary
            except Exception as e:
                st.error(f"Something went wrong:{e}")
                         

if st.session_state["summary"]:
    st.subheader("ðŸ“‹ Summary and Action Items")
    st.write(st.session_state.summary)

    st.download_button(
        label="ðŸ“¥ Download Summary",
        data=st.session_state.summary,
        file_name="meeting_summary.txt",
        mime="text/plain"
    )
    with st.form("Email Summary"):
        name=st.text_input("Your_Name")
        reply_to=st.text_input("Your Email (for replies)")
        recipient_emails=st.text_input("Recipient Emails(s), seperated by commas")
        if st.form_submit_button("Send Email"):
            recipient_list = [email.strip() for email in recipient_emails.split(",") if email.strip()]
            if recipient_list:
                subject=f"Meeting Summary from {name or 'Anonymous'}"
                sent=send_email(recipient_list,subject,st.session_state["summary"],reply_to=reply_to,name=name)
                if sent:
                    st.success("Email sent successfully!")
            else:
                st.warning("Please enter at least one recipient.")
                    
        
        